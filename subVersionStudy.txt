Link : http://svnbook.red-bean.com/en/1.7/svn-book.pdf

Subversion : free/open source version control system (VCS).

Subversion's Components
   svn : The command-line client program.
   svnversion : A program for reporting the state (in terms of revisions of the items present) of a working copy.
   svnlook : A tool for directly inspecting a Subversion repository.
   svnadmin : A tool for creating, tweaking, or repairing a Subversion repository.
   mod_dav_svn : A plug-in module for the Apache HTTP Server, used to make your repository available to others over a network.
   svnserve : A custom standalone server program, runnable as a daemon process or invokable by SSH; another way to make your repository.
   available to others over a network.
   svndumpfilter  : A program for filtering Subversion repository dump streams.
   svnsync : A program for incrementally mirroring one repository to another over a network.
   svnrdump : A program for performing repository history dumps and loads over a network.

Cautions for using Subversions:
   Unix based cmd interface.
   backward slashes ¥ instead of forward slashes / for path separators.

Vocabulary:
   top-down learner : gets a large overview first before getting into real work.
   bottom-up learner : learn by doing. Start the work first and get the big picture later.

//SV = Subversion

SV's Fundamental Concepts
   Repository : a central store of the system's data( filesystem tree form).
   copy-modify-merge solution instead of lock-modify-unlock solution.
   out-of-date error : local file is older than the repository's file.
      Other workers might have merged their files into repository.
      In git language, we can put this as 'conflict'.
   When 'locking' is needed : binary files like img,psd,or sound.
   Most important tip for avoiding 'conflict' : communicate with team.

   Repository access URLs:
      file:/// Direct repository access (on local disk)
      http://  Access via WebDAV protocol to Subversion-aware Apache server
      https:// Same as http://, but with SSL encapsulation (encryption and authentication)
      svn://   Access via custom protocol to an svnserve server
      svn+ssh://  Same as svn://, but through an SSH tunnel
      ^/ : directory of root of the repository

   Working copy:
      SV records 1.working revision & 2.timestamp recording
      Unchanged, and current : 
         Local - no changes
         Repository - no changes

      Locally changed, and current : 
         Local - changes exist (svn commit)
         Repository - no changes

      Unchanged, and out of date :
         Local - no changes
         Repository - changes exist (svn update)

      Locally changed, and out of date :
         Local - changes exist (svn commit)
         Repository - changes exist (svn update)
         *update -> commit
         *if fails to merge, fix conflict manually
      
      To get the working copy: 
         1. check out some subtree of the repository 
            *check out = create a working copy of the project.
            ex) 
               $ svn checkout http://svn.example.com/repos/calc
               A  calc/Makefile
               A  calc/integer.c
               A  calc/button.c
               Checked out revision 56.
               $ ls -A calc
               Makefile button.c integer.c .svn/
               $

            A's means SV is adding some items to the working copy.
            .svn./ holds extra information needed by SV.

      To publish your change to others:
         svn commit
            ex)
               $ svn commit button.c -m "Fixed a typo in button.c."
               Sending     button.c
               Transmitting file data .
               Committed revision 57.
               $

      To update working copy
         svn update
            ex)
               $ pwd
               /home/sally/calc
               $ ls -A
               $ svn update
               Updating '.':
               U    button.c
               Updated to revision 57.
               $
      
      *updates and commits are separate.
//

Basic Usage
   $ svn help : built-in documentation
   $ svn help [SUBCOMMAND] : show full usage message for the command.

   command modifiers:
      Referred as 'switches' or 'flag' or 'options'.
      Every option has at least one long format.
         ex)
            --changelist : --cl
            -- : most used options

   Getting Data into Your Repository
      Get new files into your Subversion repository.
         1. svn import
         2. svn add
      
      svn import
         +doesn't require a working copy.
         +files are immediately commited to the repository.
         Often used when tree of files(project) exist.
         ex)
            $ svn import /path/to/mytree ¥
                           http://svn.example.com/svn/repo/some/project ¥
                           -m "Initial import"
            Adding      mytree/foo.c
            Adding      mytree/bar.c
            Adding      mytree/subdir
            Adding      mytree/subdir/quux.h

            Committed revision 1.
            $

         +svn import creates new directory for you.

            $ svn list http://svn.exmaple.com/svn/repo/some/project
            bar.c
            foo.c
            subdir/
            $

         !! After the import is finished, the original local directory is not converted into a working copy.
         !! To begin working on that data, need to create a fresh working copy of that tree.
   
   Recommended Repository Layout:
      trunk : main line(master?) 
      branches : divergent copies of development lines
      tags : named snapshots of a particular line of development line.

      1. Each project should have a recognizable project root in the repository.
      2. Each project root should contain a trunk subdirectory for the main development line.
         A 'branches' subdirectory in which specific branches (or collections of branches) will be created,
         and a 'tags' subdirectory in which specific tags (or collections of tags) will be created. 

      ex)  
         $ svn list file:///var/svn/single-project-repo
         trunk/
         branches/
         tags/
         $ svn list file:///var/svn/multi-project-repo
         project-A/
         project-B/
         $ svn list file:///var/svn/multi-project-repo/project-A
         trunk/
         branches/
         tags/
         $

      *SV uses UTF-8 encode.
   
   Creating Working copy:
      'checkout' a directory = create a working copy of that directory on local machine.
      ex)
         $ svn checkout http://svn.example.com/svn/repo/trunk
         A trunk/README
         A trunk/INSTALL
         A trunk/src/main.c
         A trunk/src/header.h
         …
         Checked out revision 8810.
         $

      checkout a deppter subdirectory of a repository.
      ex)
         $ svn checkout http://svn.example.com/svn/repo/trunk/src
         A src/main.c
         A src/header.h
         A src/lib/helpers.c
         …
         Checked out revision 8810.
         $
      
      To copy or move an item in a working copy
         1. svn copy
         2. svn move
         !! not to use OS's copy&paste or move command.

         Optionally specify the local directory name.
            $ svn checkout http://svn.example.com/svn/repo/trunk my-working-copy
            A my-working-copy/README
            A my-working-copy/INSTALL
            A my-working-copy/src/main.c
            A my-working-copy/src/header.h
            …
            Checked out revision 8810.
            $
         *if no names are specified, svn checkout will create it for you.

   Basic Work Cycle:
      1. Update your working copy.(svn update)
      2. Make your changes.(svn add, svn delete, svn copy, svn move)
      3. Review your changes.(svn status, svn diff)
      4. Fix your mistakes.(svn revert: restores a file/directory)
      5. Resolve any conflicts (merge others' changes).(svn update, svn resolve)
      6. Publish (commit) your changes.(svn commit)

   Update Your Working Copy:
      svn update : sync local working copy with latest version.
      ex)
         $ svn update
         Updating '.':
         U foo.c
         U bar.c
         Updated to revision 2.
         $   
   
   Make Your Changes:
      file changes : common file code, context change
      tree changes : directory's structure change. (eg: add/remove/rename files or directories)
         svn commands
            1. svn add FOO 
                  To schedule the file, directory, or symbolic link FOO to be added to the repository. 
                  If you want only to add FOO itself, pass the --depth=empty option.
                  commit required.

            2. svn delete FOO 
                  To schedule the file, directory, or symbolic link FOO to be deleted from the repository. 
                  commit required.

            3. svn copy FOO BAR 
                  Create a new item BAR as a duplicate of FOO and automatically schedule BAR for addition. 
                  To create intermediate directories, pass the '--parents' option.

            4. svn move FOO BAR  
                  svn copy FOO BAR; : BAR is scheduled for addition as a copy of FOO.
                  svn delete FOO :  FOO is scheduled for removal.
                  To create intermediate directories, pass the '--parents' option.

            5. svn mkdir FOO 
                  mkdir FOO; :  a new directory named FOO is created.
                  svn add FOO :  FOO is scheduled for addition.
      *Repository can be changed w/o the working copy.
   
   Review your changes: 
      svn status : see the overview of the changes you've made.
      svn diff : get more detail of those changes.

         ex)
            $ svn status
            ? scratch.c
            A stuff/loot
            A stuff/loot/new.c
            D stuff/old.c
            M bar.c
            $

         ? : is not under version control.
         A : has been scheduled for addition into the repository.
         C : is in a state of conflict.
         D : has been scheduled for deletion from the repository.
         M : the content has been modified.

      Able to get information about the item itself by passing path to svn status.
         ex)
            $ svn status stuff/fish.c
            D stuff/fish.c
         
      svn status --verbose (-v) : show status of every item in working copy, eventhough it has not been modified.
         ex)
            $ svn status -v
            M     44 23 sally README
                  44 30 sally INSTALL
            M     44 20 harry bar.c
                  44 18 ira stuff
                  44 35 harry stuff/trout.c
            D     44 19 ira stuff/fish.c
                  44 21 sally stuff/things
            A     0 ? ? stuff/things/bloo.h
                  44 36 harry stuff/things/gloo.c

      To see items which have been modified in repository.
         svn status --show-updates
         ex)
            $ svn status -u -v
            M     *     44    23    sally    README
            M           44    20    harry    bar.c
                  *     44    35    harry    stuff/trout.c
            D           44    19    ira      stuff/fish.c
            A           0     ?     ?        stuff/things/bloo.h
            Status against revision: 46

         svn diff : displays differences in file content.
            - : lines removed from the file.
            + : lines added to the file.
            ex)
               $ svn diff
               Index: bar.c
               ===================================================================
               --- bar.c (revision 3)
               +++ bar.c (working copy)
               @@ -1,7 +1,12 @@
               +#include <sys/types.h>
               +#include <sys/stat.h>
               +#include <unistd.h>
               +
               +#include <stdio.h>
               int main(void) {
               - printf("Sixty-four slices of American Cheese...\n");
               + printf("Sixty-five slices of American Cheese...\n");
               return 0;
               }
               Index: README
               ===================================================================
               --- README (revision 3)
               +++ README (working copy)
               @@ -193,3 +193,4 @@
               +Note to self: pick up laundry.
               Index: stuff/fish.c
               ===================================================================
               --- stuff/fish.c (revision 1)
               +++ stuff/fish.c (working copy)
               -Welcome to the file known as 'fish'.
               -Information on fish will be here soon.
               Index: stuff/things/bloo.h
               ===================================================================
               --- stuff/things/bloo.h (revision 8)
               +++ stuff/things/bloo.h (working copy)
               +Here is a new file to describe
               +things about bloo.

   Fix your mistakes:
      svn revert = undo
      ex)
         $ svn status README
         M     README
         $ svn revert README
         Reverted 'README'
         $ svn status README
         $
      



