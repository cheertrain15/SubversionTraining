Link : http://svnbook.red-bean.com/en/1.7/svn-book.pdf

Subversion : free/open source version control system (VCS).

Subversion's Components
   svn : The command-line client program.
   svnversion : A program for reporting the state (in terms of revisions of the items present) of a working copy.
   svnlook : A tool for directly inspecting a Subversion repository.
   svnadmin : A tool for creating, tweaking, or repairing a Subversion repository.
   mod_dav_svn : A plug-in module for the Apache HTTP Server, used to make your repository available to others over a network.
   svnserve : A custom standalone server program, runnable as a daemon process or invokable by SSH; another way to make your repository.
   available to others over a network.
   svndumpfilter  : A program for filtering Subversion repository dump streams.
   svnsync : A program for incrementally mirroring one repository to another over a network.
   svnrdump : A program for performing repository history dumps and loads over a network.

Cautions for using Subversions:
   Unix based cmd interface.
   backward slashes ¥ instead of forward slashes / for path separators.

Vocabulary:
   top-down learner : gets a large overview first before getting into real work.
   bottom-up learner : learn by doing. Start the work first and get the big picture later.

//SV = Subversion

SV's Fundamental Concepts
   Repository : a central store of the system's data( filesystem tree form).
   copy-modify-merge solution instead of lock-modify-unlock solution.
   out-of-date error : local file is older than the repository's file.
      Other workers might have merged their files into repository.
      In git language, we can put this as 'conflict'.
   When 'locking' is needed : binary files like img,psd,or sound.
   Most important tip for avoiding 'conflict' : communicate with team.

   Repository access URLs:
      file:/// Direct repository access (on local disk)
      http://  Access via WebDAV protocol to Subversion-aware Apache server
      https:// Same as http://, but with SSL encapsulation (encryption and authentication)
      svn://   Access via custom protocol to an svnserve server
      svn+ssh://  Same as svn://, but through an SSH tunnel
      ^/ : directory of root of the repository

   Working copy:
      SV records 1.working revision & 2.timestamp recording
      Unchanged, and current : 
         Local - no changes
         Repository - no changes

      Locally changed, and current : 
         Local - changes exist (svn commit)
         Repository - no changes

      Unchanged, and out of date :
         Local - no changes
         Repository - changes exist (svn update)

      Locally changed, and out of date :
         Local - changes exist (svn commit)
         Repository - changes exist (svn update)
         *update -> commit
         *if fails to merge, fix conflict manually
      
      To get the working copy: 
         1. check out some subtree of the repository 
            *check out = create a working copy of the project.
            ex) 
               $ svn checkout http://svn.example.com/repos/calc
               A  calc/Makefile
               A  calc/integer.c
               A  calc/button.c
               Checked out revision 56.
               $ ls -A calc
               Makefile button.c integer.c .svn/
               $

            A's means SV is adding some items to the working copy.
            .svn./ holds extra information needed by SV.

      To publish your change to others:
         svn commit
            ex)
               $ svn commit button.c -m "Fixed a typo in button.c."
               Sending     button.c
               Transmitting file data .
               Committed revision 57.
               $

      To update working copy
         svn update
            ex)
               $ pwd
               /home/sally/calc
               $ ls -A
               $ svn update
               Updating '.':
               U    button.c
               Updated to revision 57.
               $
      
      *updates and commits are separate.
//

Basic Usage
   $ svn help : built-in documentation
   $ svn help [SUBCOMMAND] : show full usage message for the command.

   command modifiers:
      Referred as 'switches' or 'flag' or 'options'.
      Every option has at least one long format.
         ex)
            --changelist : --cl
            -- : most used options

   Getting Data into Your Repository
      Get new files into your Subversion repository.
         1. svn import
         2. svn add
      
      svn import
         +doesn't require a working copy.
         +files are immediately commited to the repository.
         Often used when tree of files(project) exist.
         ex)
            $ svn import /path/to/mytree ¥
                           http://svn.example.com/svn/repo/some/project ¥
                           -m "Initial import"
            Adding      mytree/foo.c
            Adding      mytree/bar.c
            Adding      mytree/subdir
            Adding      mytree/subdir/quux.h

            Committed revision 1.
            $

         +svn import creates new directory for you.

            $ svn list http://svn.exmaple.com/svn/repo/some/project
            bar.c
            foo.c
            subdir/
            $

         !! After the import is finished, the original local directory is not converted into a working copy.
         !! To begin working on that data, need to create a fresh working copy of that tree.
   
   Recommended Repository Layout:
      trunk : main line(master?) 
      branches : divergent copies of development lines
      tags : named snapshots of a particular line of development line.

      1. Each project should have a recognizable project root in the repository.
      2. Each project root should contain a trunk subdirectory for the main development line.
         A 'branches' subdirectory in which specific branches (or collections of branches) will be created,
         and a 'tags' subdirectory in which specific tags (or collections of tags) will be created. 

      ex)  
         $ svn list file:///var/svn/single-project-repo
         trunk/
         branches/
         tags/
         $ svn list file:///var/svn/multi-project-repo
         project-A/
         project-B/
         $ svn list file:///var/svn/multi-project-repo/project-A
         trunk/
         branches/
         tags/
         $

      *SV uses UTF-8 encode.
   
   Creating Working copy:
      'checkout' a directory = create a working copy of that directory on local machine.
      ex)
         $ svn checkout http://svn.example.com/svn/repo/trunk
         A trunk/README
         A trunk/INSTALL
         A trunk/src/main.c
         A trunk/src/header.h
         …
         Checked out revision 8810.
         $

      checkout a deppter subdirectory of a repository.
      ex)
         $ svn checkout http://svn.example.com/svn/repo/trunk/src
         A src/main.c
         A src/header.h
         A src/lib/helpers.c
         …
         Checked out revision 8810.
         $
      
      To copy or move an item in a working copy
         1. svn copy
         2. svn move
         !! not to use OS's copy&paste or move command.

         Optionally specify the local directory name.
            $ svn checkout http://svn.example.com/svn/repo/trunk my-working-copy
            A my-working-copy/README
            A my-working-copy/INSTALL
            A my-working-copy/src/main.c
            A my-working-copy/src/header.h
            …
            Checked out revision 8810.
            $
         *if no names are specified, svn checkout will create it for you.

   Basic Work Cycle:
      1. Update your working copy.(svn update)
      2. Make your changes.(svn add, svn delete, svn copy, svn move)
      3. Review your changes.(svn status, svn diff)
      4. Fix your mistakes.(svn revert: restores a file/directory)
      5. Resolve any conflicts (merge others' changes).(svn update, svn resolve)
      6. Publish (commit) your changes.(svn commit)

   Update Your Working Copy:
      svn update : sync local working copy with latest version.
      ex)
         $ svn update
         Updating '.':
         U foo.c
         U bar.c
         Updated to revision 2.
         $   
   
   Make Your Changes:
      file changes : common file code, context change
      tree changes : directory's structure change. (eg: add/remove/rename files or directories)
         svn commands
            1. svn add FOO 
                  To schedule the file, directory, or symbolic link FOO to be added to the repository. 
                  If you want only to add FOO itself, pass the --depth=empty option.
                  commit required.

            2. svn delete FOO 
                  To schedule the file, directory, or symbolic link FOO to be deleted from the repository. 
                  commit required.

            3. svn copy FOO BAR 
                  Create a new item BAR as a duplicate of FOO and automatically schedule BAR for addition. 
                  To create intermediate directories, pass the '--parents' option.

            4. svn move FOO BAR  
                  svn copy FOO BAR; : BAR is scheduled for addition as a copy of FOO.
                  svn delete FOO :  FOO is scheduled for removal.
                  To create intermediate directories, pass the '--parents' option.

            5. svn mkdir FOO 
                  mkdir FOO; :  a new directory named FOO is created.
                  svn add FOO :  FOO is scheduled for addition.
      *Repository can be changed w/o the working copy.
   
   Review your changes: 
      svn status : see the overview of the changes you've made.
      svn diff : get more detail of those changes.

         ex)
            $ svn status
            ? scratch.c
            A stuff/loot
            A stuff/loot/new.c
            D stuff/old.c
            M bar.c
            $

         ? : is not under version control.
         A : has been scheduled for addition into the repository.
         C : is in a state of conflict.
         D : has been scheduled for deletion from the repository.
         M : the content has been modified.

      Able to get information about the item itself by passing path to svn status.
         ex)
            $ svn status stuff/fish.c
            D stuff/fish.c
         
      svn status --verbose (-v) : show status of every item in working copy, eventhough it has not been modified.
         ex)
            $ svn status -v
            M     44 23 sally README
                  44 30 sally INSTALL
            M     44 20 harry bar.c
                  44 18 ira stuff
                  44 35 harry stuff/trout.c
            D     44 19 ira stuff/fish.c
                  44 21 sally stuff/things
            A     0 ? ? stuff/things/bloo.h
                  44 36 harry stuff/things/gloo.c

      To see items which have been modified in repository.
         svn status --show-updates
         ex)
            $ svn status -u -v
            M     *     44    23    sally    README
            M           44    20    harry    bar.c
                  *     44    35    harry    stuff/trout.c
            D           44    19    ira      stuff/fish.c
            A           0     ?     ?        stuff/things/bloo.h
            Status against revision: 46

         svn diff : displays differences in file content.
            - : lines removed from the file.
            + : lines added to the file.
            ex)
               $ svn diff
               Index: bar.c
               ===================================================================
               --- bar.c (revision 3)
               +++ bar.c (working copy)
               @@ -1,7 +1,12 @@
               +#include <sys/types.h>
               +#include <sys/stat.h>
               +#include <unistd.h>
               +
               +#include <stdio.h>
               int main(void) {
               - printf("Sixty-four slices of American Cheese...\n");
               + printf("Sixty-five slices of American Cheese...\n");
               return 0;
               }
               Index: README
               ===================================================================
               --- README (revision 3)
               +++ README (working copy)
               @@ -193,3 +193,4 @@
               +Note to self: pick up laundry.
               Index: stuff/fish.c
               ===================================================================
               --- stuff/fish.c (revision 1)
               +++ stuff/fish.c (working copy)
               -Welcome to the file known as 'fish'.
               -Information on fish will be here soon.
               Index: stuff/things/bloo.h
               ===================================================================
               --- stuff/things/bloo.h (revision 8)
               +++ stuff/things/bloo.h (working copy)
               +Here is a new file to describe
               +things about bloo.

   Fix your mistakes:
      svn revert = undo(undoing scheduled operation is possible)
      ex)
         $ svn status README
         M     README
         $ svn revert README
         Reverted 'README'
         $ svn status README
         $
      
   Resolve any conflicts: 
      ex)
         $ svn update
         Updating '.':
         U  INSTALL
         G  README
         Conflict discovered in 'bar.c'.
         Select: (p) postpone, (df) diff-full, (e) edit,
                  (mc) mine-conflict, (tc) theirs-conflict,
                  (s) show all options: 

      *U = Updated
      *G = emerGed
   
      See all options
         …
         Select: (p) postpone, (df) diff-full, (e) edit,
                  (mc) mine-conflict, (tc) theirs-conflict,
                  (s) show all options: s

            (e) edit - change merged file in an editor
            (df) diff-full - show all changes made to merged file
            (r) resolved - accept merged version of file

            (dc) display-conflict - show all conflicts (ignoring merged version)
            (mc) mine-conflict - accept my version for all conflicts (same)
            (tc) theirs-conflict - accept their version for all conflicts (same)
            
            (mf) mine-full - accept my version of entire file (even non-conflicts)
            (tf) theirs-full - accept their version of entire file (same)

            (p) postpone - mark the conflict to be resolved later
            (l) launch - launch external tool to resolve conflict
            (s) show all - show this list

      Viewing conflict differences interactively:
         df
         ex)
            …
            Select: (p) postpone, (df) diff-full, (e) edit,
            (mc) mine-conflict, (tc) theirs-conflict,
            (s) show all options: df
            --- .svn/text-base/sandwich.txt.svn-base Tue Dec 11 21:33:57 2007
            +++ .svn/tmp/tempfile.32.tmp Tue Dec 11 21:34:33 2007
            @@ -1 +1,5 @@
            -Just buy a sandwich.
            +<<<<<<< .mine
            +Go pick up a cheesesteak.
            +=======
            +Bring me a taco!
            +>>>>>>> .r32
            …
      
      Postponing conflict resolution:
         For every conflicted file, Subversion places three extra unversioned files in your working copy.
            filename.mine : It contains any local modifications you had made.
            filename.rOLDREV : The unmodified revision of the file in your working copy before you began the update process.
            filename.rNEWREV : The file that your Subversion client just received from the server via the update of your working copy.

         ex)
            $ svn update
            Updating '.':
            Conflict discovered in 'sandwich.txt'.
            Select: (p) postpone, (df) diff-full, (e) edit,
                     (mc) mine-conflict, (tc) theirs-conflict,
                     (s) show all options: p
            C     sandwich.txt
            Updated to revision 2.
            Summary of conflicts:
               Text conflicts: 1
            $ ls -1
            sandwich.txt
            sandwich.txt.mine
            sandwich.txt.r1
            sandwich.txt.r2

            $ svn commit -m "Add a few more things"
            svn: E155015: Commit failed (details follow):
            svn: E155015: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict

         *If you've postponed a conflict, you need to resolve the conflict before Subversion will allow you to commit your changes. 
            svn resolve : removes the three temporary files and accepts the version of the file that you specified with the '--accept' option
               ex)
                  $ svn resolve --accept working sandwich.txt
                  Resolved conflicted state of 'sandwich.txt'
      
      Discarding your changes in favor of a newly fetched revision:
         svn resolve --accept theirs-full CONFLICTED-PATH = discard your edits and remove the temp files.
         ex)
            $ svn update
            Updating '.':
            Conflict discovered in 'sandwich.txt'.
            Select: (p) postpone, (df) diff-full, (e) edit,
                     (mc) mine-conflict, (tc) theirs-conflict,
                     (s) show all options: p
            C     sandwich.txt
            Updated to revision 2.
            Summary of conflicts:
               Text conflicts: 1
            $ ls sandwich.*
            sandwich.txt sandwich.txt.mine sandwich.txt.r2 sandwich.txt.r1
            $ svn resolve --accept theirs-full sandwich.txt
            Resolved conflicted state of 'sandwich.txt'
            $
      
         *if svn revert is used, you don't need to use svn resolve.

      Commit your changes:
         svn commit -m "Some Message"
         ex)
            $ svn commit -m "Corrected number of cheese slices."
            Sending     sandwich.txt
            Transmitting file data .
            Committed revision 3.

         svn commit -F logmsg : sends log message using txt file.
         ex)
            $ svn commit -F logmsg
            Sending     sandwich.txt
            Transmitting file data .
            Committed revision 4.

         *if no logs are written, SV writes the log automatically.

         cancel the commit
         ex)
            $ svn commit
            Waiting for Emacs...Done
            Log message unchanged or not specified
            (a)bort, (c)ontinue, (e)dit
            a
            $

      Examining History:
         svn diff : Shows line-level details of a particular change.
         svn log : Shows you broad information: log messages with date and author information 
                     attached to revisions and which paths changed in each revision.
         svn cat : Retrieves a file as it existed in a particular revision number 
                     and displays it on your screen.
         svn annotate : Retrieves a human-readable file as it existed in a particular revision number, 
                        displaying its contents in a tabular form with lastchanged information 
                        attributed to each line of the file.
         svn list : Displays the files in a directory for any given revision.

         *svn diff common usage
            1. Examining local changes.
            2. Comparing your working copy to the repository.
            3. Comparing repository revisions.

            1. Examining local changes:
               svn diff with no options -  compare your working files to the cached “pristine” copies in the .svn area.
               ex)
                  $ svn diff
                  Index: rules.txt
                  ===================================================================
                  --- rules.txt (revision 3)
                  +++ rules.txt (working copy)
                  @@ -1,4 +1,5 @@
                  Be kind to others
                  Freedom = Responsibility
                  Everything in moderation
                  -Chew with your mouth open
                  +Chew with your mouth closed
                  +Listen when others are speaking
                  $
            
            2. Comparing working copy to repository
               --revision (-r) number is passed - your working copy is compared to the specified revision in the repository.
               ex)
                  $ svn diff -r 3 rules.txt
                  Index: rules.txt
                  ===================================================================
                  --- rules.txt (revision 3)
                  +++ rules.txt (working copy)
                  @@ -1,4 +1,5 @@
                  Be kind to others
                  Freedom = Responsibility
                  Everything in moderation
                  -Chew with your mouth open
                  +Chew with your mouth closed
                  +Listen when others are speaking
                  $

            3. Comparing repository revisions
               ex)
                  $ svn diff -r 2:3 rules.txt
                  Index: rules.txt
                  ===================================================================
                  --- rules.txt (revision 2)
                  +++ rules.txt (revision 3)
                  @@ -1,4 +1,4 @@
                  Be kind to others
                  -Freedom = Chocolate Ice Cream
                  +Freedom = Responsibility
                  Everything in moderation
                  Chew with your mouth open
                  $
               
               *--change (-c) option
               ex)
                  $ svn diff -c 3 rules.txt
                  Index: rules.txt
                  ===================================================================
                  --- rules.txt (revision 2)
                  +++ rules.txt (revision 3)
                  @@ -1,4 +1,4 @@
                   Be kind to others
                  -Freedom = Chocolate Ice Cream
                  +Freedom = Responsibility
                   Everything in moderation
                   Chew with your mouth open
                  $
            
               *compare repository revisions by adding URL
                  ex)
                     $ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
                     …
                     $
            
            4. Generating a List of Historical Changes
               ex) 
                  $ svn log
                  ------------------------------------------------------------------------
                  r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line
                  Added include lines and corrected # of cheese slices.
                  ------------------------------------------------------------------------
                  r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line
                  Added main() methods.
                  ------------------------------------------------------------------------
                  r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line
                  Initial import
                  ------------------------------------------------------------------------

               *--revision (-r) : to see a different range of revisions in
                                   a particular order or just a single revision.
                  ex) 
                     svn log -r 5:19 - Display logs for revisions 5 through 19 in chronological order.
                     svn log -r 19:5 - Display logs for revisions 5 through 19 in reverse chronological order.
                     svn log -r 8 - Display logs for revision 8 only.

               *examine the log history of a single file or directory
               *display log messages only for those revisions in which the working file (or URL) changed.
                  ex)
                     $ svn log foo.c
                     …
                     $ svn log http://foo.com/svn/trunk/code/foo.c
                     …
               
               *even more information about a file or directory
               ex)
                  $ svn log -r 8 -v
                  ------------------------------------------------------------------------
                  r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line
                  Changed paths:
                  M /trunk/code/foo.c
                  M /trunk/code/bar.h
                  A /trunk/code/doc/README
                  Frozzled the sub-space winch.
                  ------------------------------------------------------------------------
               *svn log also takes a --quiet (-q)
               * svn log -r 2 ^/. = to see what changed in specific revision.
               * svn log -diff = to see both the high-level, semantic changes and the line-based modifications 
                                 of a revision all at the same time.
            
      Browsing the Repository 
         svn cat =  examine an earlier version of a file and not necessarily the differences between two files.
         svn list

         Displaying File contents
            ex)
               $ svn cat -r 2 rules.txt
               Be kind to others
               Freedom = Chocolate Ice Cream
               Everything in moderation
               Chew with your mouth open
               $

            *Redirect the output directly into a file
               $ svn cat -r 2 rules.txt > rules.txt.v2
               $
            
         Displaying line-by-line change attribution
            ex)
               $ svn annotate rules.txt
               1 harry Be kind to others
               3 sally Freedom = Responsibility
               1 harry Everything in moderation
               -      - Chew with your mouth closed
               -      - Listen when others are speaking
            
            *see the unmodified form of the file.
            ex)
               $ svn annotate rules.txt@BASE
               1     harry Be kind to others
               3     sally Freedom = Responsibility
               1     harry Everything in moderation
               1     harry Chew with your mouth open

            ex)
               $ svn blame rules.txt -r 2
               1 harry Be kind to others
               1 harry Freedom = Chocolate Ice Cream
               1 harry Everything in moderation
               1 harry Chew with your mouth open
            
            * not human-readable
            ex)
               $ svn annotate images/logo.png
               Skipping binary file: 'images/logo.png'
               $
               *error

            ex)
               $ svn annotate images/logo.png --force
                  6     harry \211PNG
                  6     harry ^Z
                  6     harry
                  7     harry \274\361\MI\300\365\353^X\300…
            *svn blame
            *svn praise

         Listing versione directories
            svn list = shows you what files are in a repository directory
            ex)
               $ svn list http://svn.example.com/repo/project
               README
               branches/
               tags/
               trunk/

               $ svn list -v http://svn.example.com/repo/project
                  23351 sally                Feb 05 13:26 ./
                  20620 harry          1084  Jul 13 2006 README
                  23339 harry                Feb 04 01:40 branches/
                  23198 harry                Jan 23 17:17 tags/
                  23351 sally                Feb 05 13:26 trunk/

   Fetching Older Repository Snapshots
      --revision (-r) option with svn update = to take an entire working copy “back in time”.
      ex)
         # Make the current directory look like it did in r1729.
         $ svn update -r 1729
         Updating '.':
         …
         $

      *To create a whole new working copy from an older snapshot.
      ex)
         # Checkout the trunk from r1729.
         $ svn checkout http://svn.example.com/svn/repo/trunk@1729 trunk-1729
         …
         # Checkout the current trunk as it looked in r1729.
         $ svn checkout http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
         …
         $

      *To create a local copy of all or part of your repository 
      without any .svn administrative directories included. 
      ex)
         # Export the trunk from the latest revision.
         $ svn export http://svn.example.com/svn/repo/trunk trunk-export
         …
         # Export the trunk from r1729.
         $ svn export http://svn.example.com/svn/repo/trunk@1729 trunk-1729
         …
         # Export the current trunk as it looked in r1729.
         $ svn export http://svn.example.com/svn/repo/trunk -r 1729 trunk-1729
         …
         $

   Recovering from an Interruption
      svn cleanup : searches your working copy and runs any leftover to-do items, 
                  removing working copy locks as it completes those operations.
                  *use it when 'locked' problem occurs.
      ex)
         $ svn status
            L  somedir
         M     somedir/foo.c
         $ svn cleanup
         $ svn status
         M     somedir/foo.c
         
   Dealing with Structural Conflicts
      svn info = shows the URLs of the items involved in the conflict.
         The left URL shows the source of the local side of the conflict.
         The right URL shows the source of the incoming side of the conflict.

      ex)
         $ svn info code/bar.c
         Path: code/bar.c 
         Name: bar.c
         URL: http://svn.example.com/svn/repo/trunk/code/bar.c
         …
         Tree conflict: local edit, incoming delete upon update
         Source left: (file) ^/trunk/code/bar.c@4
         Source right: (none) ^/trunk/code/bar.c@5
         $

//

Advanced Topics

   Revision Specifiers
      HEAD - The latest (or “youngest”) revision in the repository.
      BASE - The revision number of an item in a working copy. 
      COMMITTED - The most recent revision prior to, or equal to, BASE, in which an item changed.
      PREV - The revision immediately before the last revision in which an item changed. (Same as COMMITTED-1)

   $ svn diff -r PREV:COMMITTED foo.c
   # shows the last change committed to foo.c

   $ svn log -r HEAD
   # shows log message for the latest repository commit
   
   $ svn diff -r HEAD
   # compares your working copy (with all of its local changes) to the
   # latest version of that tree in the repository
   
   $ svn diff -r BASE:HEAD foo.c
   # compares the unmodified version of foo.c with the latest version of
   # foo.c in the repository
   
   $ svn log -r BASE:HEAD
   # shows all commit logs for the current versioned directory since you
   # last updated

   $ svn update -r PREV foo.c
   # rewinds the last change on foo.c, decreasing foo.c's working revision

   $ svn diff -r BASE:14 foo.c
   # compares the unmodified version of foo.c with the way foo.c looked
   # in revision 14   


   Revision Dates
   $ svn update -r {2006-02-17}
   $ svn update -r {15:30}
   $ svn update -r {15:30:00.200000}
   $ svn update -r {"2006-02-17 15:30"}
   $ svn update -r {"2006-02-17 15:30 +0230"}
   $ svn update -r {2006-02-17T15:30}
   $ svn update -r {2006-02-17T15:30Z}
   $ svn update -r {2006-02-17T15:30-04:00}
   $ svn update -r {20060217T1530}
   $ svn update -r {20060217T1530Z}
   $ svn update -r {20060217T1530-0500}
   …

   $ svn log -r {2006-11-28}
   ------------------------------------------------------------------------
   r12 | ira | 2006-11-27 12:31:51 -0600 (Mon, 27 Nov 2006) | 6 lines
   …

   *Find all revisions between both dates
   $ svn log -r {2006-11-20}:{2006-11-29}
   …

   Peg and Operative Revisions
      rename directory = rename Concepts
      peg revision = sole purpose of identifying unique lines of history
      *--revision (-r) = operative revision range.
      
      The Peg Revision Algorithm
         $ svn command -r OPERATIVE-REV item@PEG-REV

         If OPERATIVE-REV is older than PEG-REV, the algorithm is as follows:

         1. Locate item in the revision identified by PEG-REV. There can be only one such object.
         2. Trace the object's history backwards (through any possible renames) to its ancestor in the revision OPERATIVE-REV.
         3. Perform the requested action on that ancestor, wherever it is located, or whatever its name might be or might have been
            at that time.
            
      





                  

